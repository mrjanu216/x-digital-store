<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>SK Mines Predictor</title>
  <style>
    body {
      background: #111;
      font-family: 'Poppins', sans-serif;
      color: gold;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 20px;
    }

    h1 {
      font-size: 1.8rem;
      margin-bottom: 10px;
    }

    .grid {
      display: grid;
      grid-template-columns: repeat(5, 50px);
      grid-template-rows: repeat(5, 50px);
      gap: 5px;
      margin: 20px 0;
    }

    .cell {
      background: #222;
      color: #FFD700;
      font-size: 1.2rem;
      display: flex;
      justify-content: center;
      align-items: center;
      border: 1px solid #333;
      border-radius: 6px;
    }

    .controls {
      display: flex;
      gap: 10px;
      margin-bottom: 10px;
    }

    input {
      padding: 8px;
      border-radius: 6px;
      border: 1px solid #444;
      background: #222;
      color: gold;
      font-weight: bold;
      width: 120px;
      text-align: center;
    }

    button {
      background: gold;
      color: #111;
      border: none;
      padding: 8px 12px;
      border-radius: 6px;
      font-weight: bold;
      cursor: pointer;
    }

    .result {
      margin-top: 10px;
      font-size: 1.2rem;
    }
  </style>
</head>
<body>
  <h1>🔮 SK Mines Predictor</h1>

  <div class="controls">
    <input type="text" id="rowInput" placeholder="Enter row (A–E or 1–5)" />
    <button onclick="addRow()">Add</button>
    <button onclick="predict()">Next Prediction</button>
  </div>

  <div class="grid" id="grid"></div>
  <div class="result" id="resultText">Next Safe Row: --</div>

  <script>
    const columns = ['A', 'B', 'C', 'D', 'E'];
    const rows = ['1', '2', '3', '4', '5'];
    const grid = document.getElementById('grid');
    const resultText = document.getElementById('resultText');
    let history = JSON.parse(localStorage.getItem('safeRowHistory')) || [];

    function drawGrid(predictedRow = null) {
      grid.innerHTML = '';
      for (let r = 0; r < 5; r++) {
        for (let c = 0; c < 5; c++) {
          const cell = document.createElement('div');
          cell.className = 'cell';
          const col = columns[c];
          const row = rows[r];
          const label = col + row;

          if (predictedRow) {
            if (columns.includes(predictedRow) && col === predictedRow) {
              cell.textContent = '⭐';
            } else if (rows.includes(predictedRow) && row === predictedRow) {
              cell.textContent = '⭐';
            } else {
              cell.textContent = '⬛';
            }
          } else {
            cell.textContent = '⬛';
          }

          grid.appendChild(cell);
        }
      }
    }

    function addRow() {
      const input = document.getElementById('rowInput');
      const value = input.value.trim().toUpperCase();
      if (columns.includes(value) || rows.includes(value)) {
        history.push(value);
        localStorage.setItem('safeRowHistory', JSON.stringify(history));
        input.value = '';
        alert(`✅ Row '${value}' added to history.`);
      } else {
        alert('❌ Invalid input. Use A–E or 1–5.');
      }
    }

    function buildTransitionMap(hist) {
      const transitions = {};
      for (let i = 0; i < hist.length - 1; i++) {
        const current = hist[i];
        const next = hist[i + 1];
        if (!transitions[current]) transitions[current] = [];
        transitions[current].push(next);
      }
      return transitions;
    }

    function predictNextRow() {
      if (history.length < 2) return null;
      const transitions = buildTransitionMap(history);
      const last = history[history.length - 1];
      const nextOptions = transitions[last] || [];
      if (nextOptions.length === 0) return null;

      const counts = nextOptions.reduce((acc, row) => {
        acc[row] = (acc[row] || 0) + 1;
        return acc;
      }, {});
      const sorted = Object.entries(counts).sort((a, b) => b[1] - a[1]);
      return sorted[0][0];
    }

    function predict() {
      const predicted = predictNextRow();
      drawGrid(predicted);
      resultText.textContent = `Next Safe Row: ${predicted || '--'}`;
    }

    drawGrid();
  </script>
</body>
</html>
